"use strict";(self.webpackChunkmeals_api_template=self.webpackChunkmeals_api_template||[]).push([[826],{426:(n,e,t)=>{t.d(e,{Z:()=>A});var a=t(537),i=t.n(a),r=t(645),o=t.n(r)()(i());o.push([n.id,":root {\n  --svg-side: clamp(16px, (100vw - 320px) * 1000, clamp(20px, (100vw - 640px) * 1000, clamp(25px, (100vw - 1280px) * 1000, 30px)));\n  --font-size: calc(var(--svg-side) * 0.8);\n  --n: 3;\n  --w: 780px;\n}\n\n* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nul,\nli {\n  list-style-type: none;\n}\n\nbody {\n  background-color: #6e6ce9;\n  font-family: 'Pangolin', 'Merriweather', serif, cursive;\n  min-height: 100vh;\n  display: flex;\n  flex-flow: column;\n  padding: 5px;\n}\n\n.nav-bar {\n  background-color: #848bf1;\n  padding: 2%;\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n}\n\n.logo {\n  height: calc(var(--svg-side) * 2);\n}\n\n.nav-list {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.nav-items {\n  list-style: none;\n  color: white;\n  display: flex;\n  justify-content: flex-end;\n  flex-wrap: wrap;\n  gap: 2rem;\n  margin-top: 15px;\n  margin-right: 3rem;\n}\n\n.nav-items a {\n  text-decoration: none;\n  color: black;\n}\n\n.extremity {\n  padding-block: 10px;\n  padding-inline: 20px;\n  border: 2px solid black;\n  display: flex;\n  justify-content: space-between;\n}\n\n.svg {\n  margin-block: auto;\n}\n\n.footer-row {\n  display: flex;\n  gap: 10px;\n}\n\n.app-item svg,\n.footer-row svg {\n  height: var(--svg-side);\n  width: var(--svg-side);\n}\n\nmain {\n  height: auto;\n  flex-grow: 1;\n}\n\n#app-ctn {\n  display: grid;\n  column-gap: 30px;\n  row-gap: 30px;\n  grid-template-columns: repeat(auto-fit, minmax(clamp(100%/(var(--n) + 1) + 0.1%, (var(--w) - 100vw) * 1000, 100%), 3fr));\n}\n\n.app-item {\n  padding: 5%;\n  display: flex;\n  flex-flow: column;\n  gap: 10px;\n}\n\n.app-img {\n  width: 100%;\n  height: auto;\n}\n\n.app-title {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-inline: 5%;\n}\n\n.app-div-btn {\n  display: grid;\n  grid-template-columns: auto auto;\n  column-gap: 10%;\n}\n\n.app-like-text {\n  text-align: center;\n}\n\n.app-like-svg {\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n  gap: 5px;\n}\n\n.app-btn {\n  padding-inline: 10px;\n  padding-block: 5px;\n  z-index: 1;\n  border-radius: 10px;\n  cursor: pointer;\n}\n\n.app-btn:hover {\n  background-color: rgb(114, 46, 46);\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,gIAAgI;EAChI,wCAAwC;EACxC,MAAM;EACN,UAAU;AACZ;;AAEA;EACE,UAAU;EACV,SAAS;EACT,sBAAsB;AACxB;;AAEA;;EAEE,qBAAqB;AACvB;;AAEA;EACE,yBAAyB;EACzB,uDAAuD;EACvD,iBAAiB;EACjB,aAAa;EACb,iBAAiB;EACjB,YAAY;AACd;;AAEA;EACE,yBAAyB;EACzB,WAAW;EACX,aAAa;EACb,8BAA8B;EAC9B,eAAe;AACjB;;AAEA;EACE,iCAAiC;AACnC;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,gBAAgB;EAChB,YAAY;EACZ,aAAa;EACb,yBAAyB;EACzB,eAAe;EACf,SAAS;EACT,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;EACrB,YAAY;AACd;;AAEA;EACE,mBAAmB;EACnB,oBAAoB;EACpB,uBAAuB;EACvB,aAAa;EACb,8BAA8B;AAChC;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,SAAS;AACX;;AAEA;;EAEE,uBAAuB;EACvB,sBAAsB;AACxB;;AAEA;EACE,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,aAAa;EACb,gBAAgB;EAChB,aAAa;EACb,wHAAwH;AAC1H;;AAEA;EACE,WAAW;EACX,aAAa;EACb,iBAAiB;EACjB,SAAS;AACX;;AAEA;EACE,WAAW;EACX,YAAY;AACd;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,gCAAgC;EAChC,eAAe;AACjB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,iBAAiB;EACjB,mBAAmB;EACnB,QAAQ;AACV;;AAEA;EACE,oBAAoB;EACpB,kBAAkB;EAClB,UAAU;EACV,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,kCAAkC;AACpC",sourcesContent:[":root {\n  --svg-side: clamp(16px, (100vw - 320px) * 1000, clamp(20px, (100vw - 640px) * 1000, clamp(25px, (100vw - 1280px) * 1000, 30px)));\n  --font-size: calc(var(--svg-side) * 0.8);\n  --n: 3;\n  --w: 780px;\n}\n\n* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nul,\nli {\n  list-style-type: none;\n}\n\nbody {\n  background-color: #6e6ce9;\n  font-family: 'Pangolin', 'Merriweather', serif, cursive;\n  min-height: 100vh;\n  display: flex;\n  flex-flow: column;\n  padding: 5px;\n}\n\n.nav-bar {\n  background-color: #848bf1;\n  padding: 2%;\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n}\n\n.logo {\n  height: calc(var(--svg-side) * 2);\n}\n\n.nav-list {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.nav-items {\n  list-style: none;\n  color: white;\n  display: flex;\n  justify-content: flex-end;\n  flex-wrap: wrap;\n  gap: 2rem;\n  margin-top: 15px;\n  margin-right: 3rem;\n}\n\n.nav-items a {\n  text-decoration: none;\n  color: black;\n}\n\n.extremity {\n  padding-block: 10px;\n  padding-inline: 20px;\n  border: 2px solid black;\n  display: flex;\n  justify-content: space-between;\n}\n\n.svg {\n  margin-block: auto;\n}\n\n.footer-row {\n  display: flex;\n  gap: 10px;\n}\n\n.app-item svg,\n.footer-row svg {\n  height: var(--svg-side);\n  width: var(--svg-side);\n}\n\nmain {\n  height: auto;\n  flex-grow: 1;\n}\n\n#app-ctn {\n  display: grid;\n  column-gap: 30px;\n  row-gap: 30px;\n  grid-template-columns: repeat(auto-fit, minmax(clamp(100%/(var(--n) + 1) + 0.1%, (var(--w) - 100vw) * 1000, 100%), 3fr));\n}\n\n.app-item {\n  padding: 5%;\n  display: flex;\n  flex-flow: column;\n  gap: 10px;\n}\n\n.app-img {\n  width: 100%;\n  height: auto;\n}\n\n.app-title {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-inline: 5%;\n}\n\n.app-div-btn {\n  display: grid;\n  grid-template-columns: auto auto;\n  column-gap: 10%;\n}\n\n.app-like-text {\n  text-align: center;\n}\n\n.app-like-svg {\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n  gap: 5px;\n}\n\n.app-btn {\n  padding-inline: 10px;\n  padding-block: 5px;\n  z-index: 1;\n  border-radius: 10px;\n  cursor: pointer;\n}\n\n.app-btn:hover {\n  background-color: rgb(114, 46, 46);\n}\n"],sourceRoot:""}]);const A=o},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",a=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),a&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),a&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,a,i,r){"string"==typeof n&&(n=[[null,n,void 0]]);var o={};if(a)for(var A=0;A<this.length;A++){var s=this[A][0];null!=s&&(o[s]=!0)}for(var p=0;p<n.length;p++){var c=[].concat(n[p]);a&&o[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),e.push(c))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),r="/*# ".concat(i," */");return[e].concat([r]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,a=0;a<e.length;a++)if(e[a].identifier===n){t=a;break}return t}function a(n,a){for(var r={},o=[],A=0;A<n.length;A++){var s=n[A],p=a.base?s[0]+a.base:s[0],c=r[p]||0,l="".concat(p," ").concat(c);r[p]=c+1;var d=t(l),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==d)e[d].references++,e[d].updater(u);else{var m=i(u,a);a.byIndex=A,e.splice(A,0,{identifier:l,updater:m,references:1})}o.push(l)}return o}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var r=a(n=n||[],i=i||{});return function(n){n=n||[];for(var o=0;o<r.length;o++){var A=t(r[o]);e[A].references--}for(var s=a(n,i),p=0;p<r.length;p++){var c=t(r[p]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}r=s}}},569:n=>{var e={};n.exports=function(n,t){var a=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var a="";t.supports&&(a+="@supports (".concat(t.supports,") {")),t.media&&(a+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(a+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),a+=t.css,i&&(a+="}"),t.media&&(a+="}"),t.supports&&(a+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(a,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},706:(n,e,t)=>{var a=t(379),i=t.n(a),r=t(795),o=t.n(r),A=t(569),s=t.n(A),p=t(565),c=t.n(p),l=t(216),d=t.n(l),u=t(589),m=t.n(u),f=t(426),g={};g.styleTagTransform=m(),g.setAttributes=c(),g.insert=s().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=d(),i()(f.Z,g),f.Z&&f.Z.locals&&f.Z.locals,t.p;const E=(n,e,t)=>`${n}${e}=${t}`,C=(n,e=!1,t=!1)=>`${n}${e}${t}`,v=(n,e)=>("string"==typeof e?n.classList.add(e):"object"==typeof e&&n.classList.add(...e),n),h=(n,e=!1,t=!1,a=!1)=>{const i=document.createElement(n);return v(i,e),t&&(i.textContent=t),a&&i.appendChild(a),i},x=(n,e,t,a=!1,i=!1,r=!1)=>{const o=document.createElement("button");return o.type=n,o.ariaLabel=t,v(o,e),a&&(o.textContent=a),r&&o.addEventListener("click",(n=>{window.location.href=n})(r)),i&&o.appendChild(i),o},y=async n=>{try{return await(async n=>{const e=await fetch(n);if(!e.ok){const n=await e.text();throw new Error(n)}return await e.json()})(n)}catch(n){return n}},w=["app-item","app-img","app-title","app-like","app-like-svg","app-like-text","app-div-btn","app-btn"],b="https://us-central1-involvement-api.cloudfunctions.net/capstoneApi/apps/",B="likes/",k="Wbe3IznQ2LQoFPHmVrwp/",j=async(n,e)=>{const t=e.filter((e=>e.item_id===n));return t.length>0?t[0].likes:0},S=async n=>{if(n.target.classList.contains("heart-like")){const e=n.currentTarget.dataset.id,t=C(b,k,B);await(async(n,e)=>{try{return await(async({url:n,formData:e=!1,jsonFormat:t=!1})=>{let a;e?a=Object.fromEntries(e.entries()):t&&(a=t);const i={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)},r=await fetch(n,i);if(!r.ok){const n=await r.text();throw new Error(n)}return r.json()})({url:n,formData:!1,jsonFormat:e})}catch(n){return n}})(t,await(async n=>({item_id:n}))(e));const a=await y(t),i=await j(e,a);n.target.parentNode.parentNode.querySelector(".app-like-text").textContent=`${i} like${i>1?"s":""}`,n.target.querySelector("use").setAttribute("href","../asset/resource/icons.svg#heart-like-red")}},M=async(n,e)=>{const t=document.getElementById("app-ctn");t.innerHTML="",n.forEach((async n=>{const a=await(async n=>{const e=E("https://www.themealdb.com/api/json/v1/1/lookup.php?","i",n.idMeal);return(await y(e)).meals})(n),i=await(async(n,e,t,a,i,r)=>{const o=document.createDocumentFragment();o.appendChild(((n,e,t)=>{const a=h("img",n);return a.setAttribute("src",t),a.setAttribute("alt",e),a})(e[1],t[0].strMeal,t[0].strMealThumb));const A=h("div",e[2]),s=h("p",e[3],t[0].strMeal);A.appendChild(s);const p=h("div",e[4]),c=(n=>{const e=n.split("#"),t=document.createElementNS("http://www.w3.org/2000/svg","use");t.setAttribute("href",`${n}`),t.classList.add(e[1]);const a=document.createElementNS("http://www.w3.org/2000/svg","svg");return a.appendChild(t),a.classList.add(e[1]),a})(a);p.appendChild(c);const l=h("p",e[5],`${i} like${i>1?"s":""}`);p.appendChild(l),A.appendChild(p),o.appendChild(A);const d=h("div",e[6]);d.appendChild(x("button",e[7],"Go to Comments","Comments")),d.appendChild(x("button",e[7],"Go to Reservations","Reservations")),o.appendChild(d);const u=h(n,e[0],!1,o);return u.setAttribute("data-id",t[0].idMeal),u.addEventListener("click",r),u})("li",w,a,"../asset/resource/icons.svg#heart-like",await j(a[0].idMeal,e),S);t.appendChild(i)}))};document.querySelectorAll(".nav-items a").forEach((n=>{n.addEventListener("click",(e=>{e.preventDefault(),n.classList.add("active"),(async n=>{const e=E("https://www.themealdb.com/api/json/v1/1/filter.php?","c",n.target.getAttribute("href")),t=C(b,k,B),a=await y(e),i=await y(t);a instanceof Error||i instanceof Error?(async n=>{document.getElementById("formFeedback").textContent="Unable to Fetch Data"})():await M(a.meals,i)})(e)}))}))}},n=>{n(n.s=706)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cGFjazovL21lYWxzLWFwaS10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vbWVhbHMtYXBpLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vbWVhbHMtYXBpLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL21lYWxzLWFwaS10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vbWVhbHMtYXBpLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL21lYWxzLWFwaS10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9tZWFscy1hcGktdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9tZWFscy1hcGktdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9tZWFscy1hcGktdGVtcGxhdGUvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vbWVhbHMtYXBpLXRlbXBsYXRlLy4vc3JjL21vZHVsZXMvY3JlYXRlVVJMQVBJLmpzIiwid2VicGFjazovL21lYWxzLWFwaS10ZW1wbGF0ZS8uL3NyYy9tb2R1bGVzL2NyZWF0ZUVsZW1lbnRNb2QuanMiLCJ3ZWJwYWNrOi8vbWVhbHMtYXBpLXRlbXBsYXRlLy4vc3JjL21vZHVsZXMvR2V0QVBJLmpzIiwid2VicGFjazovL21lYWxzLWFwaS10ZW1wbGF0ZS8uL3NyYy9tb2R1bGVzL2NvbnN0LmpzIiwid2VicGFjazovL21lYWxzLWFwaS10ZW1wbGF0ZS8uL3NyYy9tb2R1bGVzL3V0aWxzLmpzIiwid2VicGFjazovL21lYWxzLWFwaS10ZW1wbGF0ZS8uL3NyYy9tb2R1bGVzL1Bvc3RBUEkuanMiLCJ3ZWJwYWNrOi8vbWVhbHMtYXBpLXRlbXBsYXRlLy4vc3JjL21vZHVsZXMvTGlzdEl0ZW1Nb2QuanMiLCJ3ZWJwYWNrOi8vbWVhbHMtYXBpLXRlbXBsYXRlLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiOnJvb3Qge1xcbiAgLS1zdmctc2lkZTogY2xhbXAoMTZweCwgKDEwMHZ3IC0gMzIwcHgpICogMTAwMCwgY2xhbXAoMjBweCwgKDEwMHZ3IC0gNjQwcHgpICogMTAwMCwgY2xhbXAoMjVweCwgKDEwMHZ3IC0gMTI4MHB4KSAqIDEwMDAsIDMwcHgpKSk7XFxuICAtLWZvbnQtc2l6ZTogY2FsYyh2YXIoLS1zdmctc2lkZSkgKiAwLjgpO1xcbiAgLS1uOiAzO1xcbiAgLS13OiA3ODBweDtcXG59XFxuXFxuKiB7XFxuICBwYWRkaW5nOiAwO1xcbiAgbWFyZ2luOiAwO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxudWwsXFxubGkge1xcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xcbn1cXG5cXG5ib2R5IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM2ZTZjZTk7XFxuICBmb250LWZhbWlseTogJ1BhbmdvbGluJywgJ01lcnJpd2VhdGhlcicsIHNlcmlmLCBjdXJzaXZlO1xcbiAgbWluLWhlaWdodDogMTAwdmg7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1mbG93OiBjb2x1bW47XFxuICBwYWRkaW5nOiA1cHg7XFxufVxcblxcbi5uYXYtYmFyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM4NDhiZjE7XFxuICBwYWRkaW5nOiAyJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxufVxcblxcbi5sb2dvIHtcXG4gIGhlaWdodDogY2FsYyh2YXIoLS1zdmctc2lkZSkgKiAyKTtcXG59XFxuXFxuLm5hdi1saXN0IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZ2FwOiAxMHB4O1xcbn1cXG5cXG4ubmF2LWl0ZW1zIHtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICBjb2xvcjogd2hpdGU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXG4gIGZsZXgtd3JhcDogd3JhcDtcXG4gIGdhcDogMnJlbTtcXG4gIG1hcmdpbi10b3A6IDE1cHg7XFxuICBtYXJnaW4tcmlnaHQ6IDNyZW07XFxufVxcblxcbi5uYXYtaXRlbXMgYSB7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBjb2xvcjogYmxhY2s7XFxufVxcblxcbi5leHRyZW1pdHkge1xcbiAgcGFkZGluZy1ibG9jazogMTBweDtcXG4gIHBhZGRpbmctaW5saW5lOiAyMHB4O1xcbiAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbn1cXG5cXG4uc3ZnIHtcXG4gIG1hcmdpbi1ibG9jazogYXV0bztcXG59XFxuXFxuLmZvb3Rlci1yb3cge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGdhcDogMTBweDtcXG59XFxuXFxuLmFwcC1pdGVtIHN2ZyxcXG4uZm9vdGVyLXJvdyBzdmcge1xcbiAgaGVpZ2h0OiB2YXIoLS1zdmctc2lkZSk7XFxuICB3aWR0aDogdmFyKC0tc3ZnLXNpZGUpO1xcbn1cXG5cXG5tYWluIHtcXG4gIGhlaWdodDogYXV0bztcXG4gIGZsZXgtZ3JvdzogMTtcXG59XFxuXFxuI2FwcC1jdG4ge1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGNvbHVtbi1nYXA6IDMwcHg7XFxuICByb3ctZ2FwOiAzMHB4O1xcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maXQsIG1pbm1heChjbGFtcCgxMDAlLyh2YXIoLS1uKSArIDEpICsgMC4xJSwgKHZhcigtLXcpIC0gMTAwdncpICogMTAwMCwgMTAwJSksIDNmcikpO1xcbn1cXG5cXG4uYXBwLWl0ZW0ge1xcbiAgcGFkZGluZzogNSU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1mbG93OiBjb2x1bW47XFxuICBnYXA6IDEwcHg7XFxufVxcblxcbi5hcHAtaW1nIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiBhdXRvO1xcbn1cXG5cXG4uYXBwLXRpdGxlIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgcGFkZGluZy1pbmxpbmU6IDUlO1xcbn1cXG5cXG4uYXBwLWRpdi1idG4ge1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogYXV0byBhdXRvO1xcbiAgY29sdW1uLWdhcDogMTAlO1xcbn1cXG5cXG4uYXBwLWxpa2UtdGV4dCB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi5hcHAtbGlrZS1zdmcge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZmxvdzogY29sdW1uO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGdhcDogNXB4O1xcbn1cXG5cXG4uYXBwLWJ0biB7XFxuICBwYWRkaW5nLWlubGluZTogMTBweDtcXG4gIHBhZGRpbmctYmxvY2s6IDVweDtcXG4gIHotaW5kZXg6IDE7XFxuICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uYXBwLWJ0bjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTE0LCA0NiwgNDYpO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsZ0lBQWdJO0VBQ2hJLHdDQUF3QztFQUN4QyxNQUFNO0VBQ04sVUFBVTtBQUNaOztBQUVBO0VBQ0UsVUFBVTtFQUNWLFNBQVM7RUFDVCxzQkFBc0I7QUFDeEI7O0FBRUE7O0VBRUUscUJBQXFCO0FBQ3ZCOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCLHVEQUF1RDtFQUN2RCxpQkFBaUI7RUFDakIsYUFBYTtFQUNiLGlCQUFpQjtFQUNqQixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSx5QkFBeUI7RUFDekIsV0FBVztFQUNYLGFBQWE7RUFDYiw4QkFBOEI7RUFDOUIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGlDQUFpQztBQUNuQzs7QUFFQTtFQUNFLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsU0FBUztBQUNYOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLFlBQVk7RUFDWixhQUFhO0VBQ2IseUJBQXlCO0VBQ3pCLGVBQWU7RUFDZixTQUFTO0VBQ1QsZ0JBQWdCO0VBQ2hCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLHFCQUFxQjtFQUNyQixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxtQkFBbUI7RUFDbkIsb0JBQW9CO0VBQ3BCLHVCQUF1QjtFQUN2QixhQUFhO0VBQ2IsOEJBQThCO0FBQ2hDOztBQUVBO0VBQ0Usa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLFNBQVM7QUFDWDs7QUFFQTs7RUFFRSx1QkFBdUI7RUFDdkIsc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsWUFBWTtFQUNaLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGFBQWE7RUFDYixnQkFBZ0I7RUFDaEIsYUFBYTtFQUNiLHdIQUF3SDtBQUMxSDs7QUFFQTtFQUNFLFdBQVc7RUFDWCxhQUFhO0VBQ2IsaUJBQWlCO0VBQ2pCLFNBQVM7QUFDWDs7QUFFQTtFQUNFLFdBQVc7RUFDWCxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsOEJBQThCO0VBQzlCLG1CQUFtQjtFQUNuQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsZ0NBQWdDO0VBQ2hDLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsaUJBQWlCO0VBQ2pCLG1CQUFtQjtFQUNuQixRQUFRO0FBQ1Y7O0FBRUE7RUFDRSxvQkFBb0I7RUFDcEIsa0JBQWtCO0VBQ2xCLFVBQVU7RUFDVixtQkFBbUI7RUFDbkIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGtDQUFrQztBQUNwQ1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCI6cm9vdCB7XFxuICAtLXN2Zy1zaWRlOiBjbGFtcCgxNnB4LCAoMTAwdncgLSAzMjBweCkgKiAxMDAwLCBjbGFtcCgyMHB4LCAoMTAwdncgLSA2NDBweCkgKiAxMDAwLCBjbGFtcCgyNXB4LCAoMTAwdncgLSAxMjgwcHgpICogMTAwMCwgMzBweCkpKTtcXG4gIC0tZm9udC1zaXplOiBjYWxjKHZhcigtLXN2Zy1zaWRlKSAqIDAuOCk7XFxuICAtLW46IDM7XFxuICAtLXc6IDc4MHB4O1xcbn1cXG5cXG4qIHtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG51bCxcXG5saSB7XFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxufVxcblxcbmJvZHkge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzZlNmNlOTtcXG4gIGZvbnQtZmFtaWx5OiAnUGFuZ29saW4nLCAnTWVycml3ZWF0aGVyJywgc2VyaWYsIGN1cnNpdmU7XFxuICBtaW4taGVpZ2h0OiAxMDB2aDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWZsb3c6IGNvbHVtbjtcXG4gIHBhZGRpbmc6IDVweDtcXG59XFxuXFxuLm5hdi1iYXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzg0OGJmMTtcXG4gIHBhZGRpbmc6IDIlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIGZsZXgtd3JhcDogd3JhcDtcXG59XFxuXFxuLmxvZ28ge1xcbiAgaGVpZ2h0OiBjYWxjKHZhcigtLXN2Zy1zaWRlKSAqIDIpO1xcbn1cXG5cXG4ubmF2LWxpc3Qge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBnYXA6IDEwcHg7XFxufVxcblxcbi5uYXYtaXRlbXMge1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcbiAgZmxleC13cmFwOiB3cmFwO1xcbiAgZ2FwOiAycmVtO1xcbiAgbWFyZ2luLXRvcDogMTVweDtcXG4gIG1hcmdpbi1yaWdodDogM3JlbTtcXG59XFxuXFxuLm5hdi1pdGVtcyBhIHtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIGNvbG9yOiBibGFjaztcXG59XFxuXFxuLmV4dHJlbWl0eSB7XFxuICBwYWRkaW5nLWJsb2NrOiAxMHB4O1xcbiAgcGFkZGluZy1pbmxpbmU6IDIwcHg7XFxuICBib3JkZXI6IDJweCBzb2xpZCBibGFjaztcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxufVxcblxcbi5zdmcge1xcbiAgbWFyZ2luLWJsb2NrOiBhdXRvO1xcbn1cXG5cXG4uZm9vdGVyLXJvdyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZ2FwOiAxMHB4O1xcbn1cXG5cXG4uYXBwLWl0ZW0gc3ZnLFxcbi5mb290ZXItcm93IHN2ZyB7XFxuICBoZWlnaHQ6IHZhcigtLXN2Zy1zaWRlKTtcXG4gIHdpZHRoOiB2YXIoLS1zdmctc2lkZSk7XFxufVxcblxcbm1haW4ge1xcbiAgaGVpZ2h0OiBhdXRvO1xcbiAgZmxleC1ncm93OiAxO1xcbn1cXG5cXG4jYXBwLWN0biB7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgY29sdW1uLWdhcDogMzBweDtcXG4gIHJvdy1nYXA6IDMwcHg7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpdCwgbWlubWF4KGNsYW1wKDEwMCUvKHZhcigtLW4pICsgMSkgKyAwLjElLCAodmFyKC0tdykgLSAxMDB2dykgKiAxMDAwLCAxMDAlKSwgM2ZyKSk7XFxufVxcblxcbi5hcHAtaXRlbSB7XFxuICBwYWRkaW5nOiA1JTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWZsb3c6IGNvbHVtbjtcXG4gIGdhcDogMTBweDtcXG59XFxuXFxuLmFwcC1pbWcge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IGF1dG87XFxufVxcblxcbi5hcHAtdGl0bGUge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBwYWRkaW5nLWlubGluZTogNSU7XFxufVxcblxcbi5hcHAtZGl2LWJ0biB7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBhdXRvIGF1dG87XFxuICBjb2x1bW4tZ2FwOiAxMCU7XFxufVxcblxcbi5hcHAtbGlrZS10ZXh0IHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLmFwcC1saWtlLXN2ZyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1mbG93OiBjb2x1bW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZ2FwOiA1cHg7XFxufVxcblxcbi5hcHAtYnRuIHtcXG4gIHBhZGRpbmctaW5saW5lOiAxMHB4O1xcbiAgcGFkZGluZy1ibG9jazogNXB4O1xcbiAgei1pbmRleDogMTtcXG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5hcHAtYnRuOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigxMTQsIDQ2LCA0Nik7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJjb25zdCBjcmVhdGVBcGlNZWFsVVJMID0gKGJhc2V1cmwsIHF1ZXJ5S2V5LCBxdWVyeVZhbHVlKSA9PiB7XG4gIGNvbnN0IHVybCA9IGAke2Jhc2V1cmx9JHtxdWVyeUtleX09JHtxdWVyeVZhbHVlfWA7XG4gIHJldHVybiB1cmw7XG59O1xuXG5jb25zdCBjcmVhdGVBcGlJbnZVUkwgPSAoYmFzZXVybCwgaWQgPSBmYWxzZSwgZW5kcG9pbnQgPSBmYWxzZSkgPT4ge1xuICBjb25zdCB1cmwgPSBgJHtiYXNldXJsfSR7aWR9JHtlbmRwb2ludH1gO1xuICByZXR1cm4gdXJsO1xufTtcblxuZXhwb3J0IHtcbiAgY3JlYXRlQXBpTWVhbFVSTCwgY3JlYXRlQXBpSW52VVJMLFxufTsiLCJjb25zdCByZWRpcmVjdFdpbmRvdyA9IChocmVmKSA9PiB7XG4gIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbn07XG5cbi8qKlxuICogRnVuY3Rpb24gdG8gYWRkIGNsYXNzIG9yIGNsYXNzZXMgdG8gSFRNTCBFbGVtZW50XG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtIEhUTUwgRWxlbWVudCB0byBiZSBtb2RpZmllZC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBjbGFzc2VzIFN0cmluZyBvciBBcnJheSBvZiBTdHJpbmcgdG8gYmUgYWRkZWQuXG4gKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9IFJldHVybnMgSFRNTCBlbGVtZW50IHdpdGggY2hvc2VuIGNsYXNzZXMuXG4gKi9cbmNvbnN0IGFkZENsYXNzID0gKGVsZW0sIGNsYXNzZXMpID0+IHtcbiAgaWYgKCh0eXBlb2YgY2xhc3NlcykgPT09ICdzdHJpbmcnKSBlbGVtLmNsYXNzTGlzdC5hZGQoY2xhc3Nlcyk7XG4gIGVsc2UgaWYgKCh0eXBlb2YgY2xhc3NlcykgPT09ICdvYmplY3QnKSBlbGVtLmNsYXNzTGlzdC5hZGQoLi4uY2xhc3Nlcyk7XG4gIHJldHVybiBlbGVtO1xufTtcblxuLyoqXG4gKiBGdW5jdGlvbiB0byBjcmVhdGUgSFRNTCBlbGVtZW50IHVzaW5nIHRhZyBuYW1lcy5cbiAqIENsYXNzZXMgYW5kIHRleHQgY29udGVudCBjYW4gYmUgYWRkZWQgYXMgZWxlbWVudCBpcyBjcmVhdGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gZWxlbSBUYWcgbmFtZSBvZiB0aGUgZWxlbWVudCB0byBiZSBjcmVhdGVkLiBFeGFtcGxlOiBgZGl2LCBwLCBzZWN0aW9uYFxuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzZXMgTmFtZSBvZiBjbGFzcyBvciBjbGFzc2VzIHRvIGFkZC4gU3RyaW5nLCBhcnJheSBvZiBzdHJpbmcgc2hvdWxkIGJlIHVzZWQuXG4gKiBJZiBubyBjbGFzcyBpcyB3YW50ZWQsIGZhbHNlIHNob3VsZCBiZSB1c2UuT3B0aW9uYWwgUGFyYW1lbnRlci5cbiAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0Q29udGV4dCBUZXh0IHRvIGJlIGFkZGVkIGFzIHRleHQgY29udGVudCB0byBIVE1MIGVsZW1lbnQuXG4gKiBPcHRpb24gcGFyYW1ldGVyLlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gaW5uZXJDaGlsZCBIVE1MIEVsZW1lbnQgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH0gUmV0dXJucyBIVE1MIGVsZW1lbnQgY2hvc2VuIHdpdGggc2V0IGF0dHJpYnV0ZXMuXG4gKi9cbmNvbnN0IGNyZWF0ZUVsZW1lbnREZWZhdWx0ID0gKGVsZW0sIGNsYXNzZXMgPSBmYWxzZSwgdGV4dENvbnRlbnQgPSBmYWxzZSwgaW5uZXJDaGlsZCA9IGZhbHNlKSA9PiB7XG4gIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGVsZW0pO1xuICBhZGRDbGFzcyhlbGVtZW50LCBjbGFzc2VzKTtcbiAgaWYgKHRleHRDb250ZW50KSBlbGVtZW50LnRleHRDb250ZW50ID0gdGV4dENvbnRlbnQ7XG4gIGlmIChpbm5lckNoaWxkKSBlbGVtZW50LmFwcGVuZENoaWxkKGlubmVyQ2hpbGQpO1xuICByZXR1cm4gZWxlbWVudDtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBIVE1MIHN2ZyBlbGVtZW50IHRvIGJlIHJlbmRlcmVkIGRpbmFtaWNhbGx5XG4gKiBAcGFyYW0ge3N0cmluZ30gaHJlZiBIeXBlcmxpbmsgcmVmZXJlbmNlIGZvciBmaWxlIGxvY2F0aW9uXG4gKiBAcmV0dXJucyB7SFRNTE9yU1ZHRWxlbWVudH0gSFRNTCBzdmcgZWxlbWVudCB0byBiZSBhcHBlbmQgdG8gRE9NIHRvIGJlIHJlbmRlcmVkIGRpbmFtaWNhbGx5XG4gKi9cbmNvbnN0IGNyZWF0ZU5TID0gKGhyZWYpID0+IHtcbiAgY29uc3QgeGxpbmsgPSBocmVmLnNwbGl0KCcjJyk7XG4gIGNvbnN0IHVzZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAndXNlJyk7XG4gIHVzZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBgJHtocmVmfWApO1xuICB1c2UuY2xhc3NMaXN0LmFkZCh4bGlua1sxXSk7XG4gIGNvbnN0IHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnc3ZnJyk7XG4gIHN2Zy5hcHBlbmRDaGlsZCh1c2UpO1xuICBzdmcuY2xhc3NMaXN0LmFkZCh4bGlua1sxXSk7XG4gIHJldHVybiBzdmc7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBIVE1MIGxhYmVsIGVsZW1lbnQgd2l0aCBhIGZvciBhdHRyaWJ1dGUsIGRpZmZlcmV0ZSBjbGFzc2VzIGFuZCBpbm5lciBjaGlsZCBhbmQgdHh0XG4gKiBjb250ZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gZm9yQXRyPWZhbHNlIEZvciBhdHRyaWJ1dGUgaW4gbGFiZWwgdGhhdCBpbmRpY2F0ZXMgd2hpY2ggaW5wdXQgb3IgdGV4dCBhcmVhXG4gKiBpdCBpcyBsaW5rZWQgd2l0aFxuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzZXM9ZmFsc2UgU3RyaW5nIG9yIGFycmF5IG9mIHN0cmluZyB3aXRoIGNsYXNzIG5hbWVzXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dENvbnRlbnQ9ZmFsc2UgU3RyaW5nIHRoYXQgcmVwcmVzZW50cyB0aGUgdGV4dCBjb250ZW50IG9mIHRoZSBsYWJlbFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gaW5uZXJDaGlsZD1mYWxzZSBIVE1MIGVsZW1lbnQgdG8gYmUgYXBwZW5kIHRvIGxhYmVsXG4gKiBAcmV0dXJucyB7SFRNTExhYmVsRWxlbWVudH0gSFRNTCBsYWJlbCBlbGVtZW50IHJlYWR5IHRvIGJlIGFwcGVuZCB0byB0aGUgZG9tXG4gKi9cbmNvbnN0IGNyZWF0ZUxhYmVsID0gKGZvckF0ciA9IGZhbHNlLCBjbGFzc2VzID0gZmFsc2UsIHRleHRDb250ZW50ID0gZmFsc2UsIGlubmVyQ2hpbGQgPSBmYWxzZSkgPT4ge1xuICBjb25zdCBsYWJlbCA9IGNyZWF0ZUVsZW1lbnREZWZhdWx0KCdsYWJlbCcsIGNsYXNzZXMsIHRleHRDb250ZW50LCBpbm5lckNoaWxkKTtcbiAgaWYgKGZvckF0cikgbGFiZWwuc2V0QXR0cmlidXRlKCdmb3InLCBmb3JBdHIpO1xuICByZXR1cm4gbGFiZWw7XG59O1xuXG5jb25zdCBjcmVhdGVUZXh0QXJlYSA9IChsZW5ndGggPSBmYWxzZSwgY2xhc3NlcyA9IGZhbHNlLFxuICB0ZXh0Q29udGVudCA9IGZhbHNlLCBpbm5lckNoaWxkID0gZmFsc2UpID0+IHtcbiAgY29uc3QgdGV4dEFyZWEgPSBjcmVhdGVFbGVtZW50RGVmYXVsdCgndGV4dGFyZWEnLCBjbGFzc2VzLCB0ZXh0Q29udGVudCwgaW5uZXJDaGlsZCk7XG4gIGlmIChsZW5ndGgpIHRleHRBcmVhLnNldEF0dHJpYnV0ZSgnbWF4bGVuZ3RoJywgbGVuZ3RoKTtcbiAgdGV4dEFyZWEuc2V0QXR0cmlidXRlKCdzcGVsbGNoZWNrJywgJ3RydWUnKTtcbiAgcmV0dXJuIHRleHRBcmVhO1xufTtcblxuLyoqXG4gKiBGdW5jdGlvbiB0byBjcmVhdGUgSFRNTCBCdXR0b24gZWxlbWVudC4gQ2xhc3NlcyBhbmQgdGV4dCBjb250ZW50XG4gKiBjYW4gYmUgYWRkZWQgYXMgZWxlbWVudCBpcyBjcmVhdGUuIENsaWNrIGV2ZW50IHRvIGEgYW5vdGhlciB3ZWJwYWdlIGNhbiBiZSBhZGRlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBmdW5jIFR5cGUgb2YgYnV0dG9uIGBzdW1iaXQsIHJlc2V0LCBidXR0b25gXG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NlcyBOYW1lIG9mIGNsYXNzIG9yIGNsYXNzZXMgdG8gYWRkLiBTdHJpbmcsIGFycmF5IG9mIHN0cmluZyBzaG91bGQgYmUgdXNlZC5cbiAqIElmIG5vIGNsYXNzIGlzIHdhbnRlZCwgZmFsc2Ugc2hvdWxkIGJlIHVzZS5PcHRpb25hbCBQYXJhbWVudGVyLlxuICogQHBhcmFtIHtzdHJpbmd9IGFyaWFMYWJlbCBUZXh0IGZvciBhY2Nlc3NpYmlsaXR5XG4gKiBAcGFyYW0ge2FueX0gdGV4dENvbnRlbnQgVGV4dCB0byBiZSBhZGRlZCBhcyB0ZXh0IGNvbnRlbnQgdG8gSFRNTCBlbGVtZW50LlxuICogT3B0aW9uIHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGlubmVyQ2hpbGQgSFRNTCBFbGVtZW50IHRvIGJlIGFwcGVuZGVkXG4gKiBAcGFyYW0ge2FueX0gaHJlZiBIeXBlcmxpbmsgcmVmZXJlbmNlIHRvIGJlIGZvbGxvd2VkIGlmIGJ1dHRvbiBpcyBjbGlja2VkLlxuICogT3B0aW9uIHBhcmFtZXRlci5cbiAqIEByZXR1cm5zIHtIVE1MQnV0dG9uRWxlbWVudH0gUmV0dXJucyBIVE1MIGJ1dHRvbiBlbGVtZW50IGNob3NlbiB3aXRoIHNldCBhdHRyaWJ1dGVzLlxuICovXG5jb25zdCBjcmVhdGVCdXR0b24gPSAoZnVuYywgY2xhc3NlcywgYXJpYUxhYmVsLCB0ZXh0Q29udGVudCA9IGZhbHNlLFxuICBpbm5lckNoaWxkID0gZmFsc2UsIGhyZWYgPSBmYWxzZSkgPT4ge1xuICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgYnV0dG9uLnR5cGUgPSBmdW5jO1xuICBidXR0b24uYXJpYUxhYmVsID0gYXJpYUxhYmVsO1xuICBhZGRDbGFzcyhidXR0b24sIGNsYXNzZXMpO1xuICBpZiAodGV4dENvbnRlbnQpIGJ1dHRvbi50ZXh0Q29udGVudCA9IHRleHRDb250ZW50O1xuICBpZiAoaHJlZikge1xuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHJlZGlyZWN0V2luZG93KGhyZWYpKTtcbiAgfVxuICBpZiAoaW5uZXJDaGlsZCkgYnV0dG9uLmFwcGVuZENoaWxkKGlubmVyQ2hpbGQpO1xuICByZXR1cm4gYnV0dG9uO1xufTtcblxuY29uc3QgY3JlYXRlSW1nID0gKGNsYXNzZXMsIG5hbWUsIHVybCkgPT4ge1xuICBjb25zdCBpbWdFbGVtID0gY3JlYXRlRWxlbWVudERlZmF1bHQoJ2ltZycsIGNsYXNzZXMpO1xuICBpbWdFbGVtLnNldEF0dHJpYnV0ZSgnc3JjJywgdXJsKTtcbiAgaW1nRWxlbS5zZXRBdHRyaWJ1dGUoJ2FsdCcsIG5hbWUpO1xuICByZXR1cm4gaW1nRWxlbTtcbn07XG5cbmV4cG9ydCB7XG4gIGNyZWF0ZUxhYmVsLCBjcmVhdGVJbWcsXG4gIGNyZWF0ZU5TLCBjcmVhdGVUZXh0QXJlYSxcbiAgYWRkQ2xhc3MsIGNyZWF0ZUVsZW1lbnREZWZhdWx0LFxuICBjcmVhdGVCdXR0b24sXG59O1xuIiwiLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gZm9yIEdFVGluZyBkYXRhIGFzIEpTT04gd2l0aCBmZXRjaC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gVVJMIHRvIEdFVCBkYXRhIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IC0gUmVzcG9uc2UgYm9keSBmcm9tIFVSTCB0aGF0IHdhcyBHRVRlZFxuICovXG5jb25zdCBmZXRjaERhdGFKU09OID0gYXN5bmMgKFVSTCkgPT4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFVSTCk7XG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gIH1cbiAgY29uc3QgZGF0YUpTT04gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gIHJldHVybiBkYXRhSlNPTjtcbn07XG5cbi8qKlxuICogRXZlbnQgaGFuZGxlciBmb3IgYSBmb3JtIHN1Ym1pdCBldmVudC5cbiAqIEBwYXJhbSB7U3VibWl0RXZlbnR9IGV2ZW50XG4gKi9cbmNvbnN0IGhhbmRsZUdFVEFQSWV2ZW50ID0gYXN5bmMgKGV2ZW50LCB1cmwpID0+IHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZURhdGEgPSBhd2FpdCBmZXRjaERhdGFKU09OKHVybCk7XG4gICAgcmV0dXJuIHJlc3BvbnNlRGF0YTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH1cbn07XG5cbi8qKlxuICogRXZlbnQgaGFuZGxlciBmb3IgYSBmb3JtIHN1Ym1pdCBldmVudC5cbiAqL1xuY29uc3QgaGFuZGxlR0VUQVBJID0gYXN5bmMgKHVybCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IGF3YWl0IGZldGNoRGF0YUpTT04odXJsKTtcbiAgICByZXR1cm4gcmVzcG9uc2VEYXRhO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxufTtcblxuZXhwb3J0IHtcbiAgZmV0Y2hEYXRhSlNPTiwgaGFuZGxlR0VUQVBJZXZlbnQsIGhhbmRsZUdFVEFQSSxcbn07IiwiY29uc3QgY2xhc3NDdG4gPSAnYXBwLWl0ZW0nO1xuY29uc3QgY2xhc3NJbWcgPSAnYXBwLWltZyc7XG5jb25zdCBjbGFzc1RpdHRsZSA9ICdhcHAtdGl0bGUnO1xuY29uc3QgY2xhc3NMaWtlcyA9ICdhcHAtbGlrZSc7XG5jb25zdCBjbGFzc0xpa2VzU1ZHID0gJ2FwcC1saWtlLXN2Zyc7XG5jb25zdCBjbGFzc0xpa2VzVGV4dCA9ICdhcHAtbGlrZS10ZXh0JztcbmNvbnN0IGNsYXNzRGl2QnRuID0gJ2FwcC1kaXYtYnRuJztcbmNvbnN0IGNsYXNzQnRuID0gJ2FwcC1idG4nO1xuXG5jb25zdCBjbGFzc2VzID0gW1xuICBjbGFzc0N0biwgY2xhc3NJbWcsIGNsYXNzVGl0dGxlLCBjbGFzc0xpa2VzLFxuICBjbGFzc0xpa2VzU1ZHLCBjbGFzc0xpa2VzVGV4dCwgY2xhc3NEaXZCdG4sIGNsYXNzQnRuLFxuXTtcblxuY29uc3QgeGxpbmsgPSAnLi4vYXNzZXQvcmVzb3VyY2UvaWNvbnMuc3ZnI2hlYXJ0LWxpa2UnO1xuXG5jb25zdCBiYXNldXJsRmlsdGVyTWVhbCA9ICdodHRwczovL3d3dy50aGVtZWFsZGIuY29tL2FwaS9qc29uL3YxLzEvZmlsdGVyLnBocD8nO1xuY29uc3QgYmFzZXVybGxvb2t1cE1lYWwgPSAnaHR0cHM6Ly93d3cudGhlbWVhbGRiLmNvbS9hcGkvanNvbi92MS8xL2xvb2t1cC5waHA/JztcbmNvbnN0IHBhcmFtZXRlck1lYWxJRCA9ICdpJztcbmNvbnN0IHBhcmFtZXRlck1lYWxDYXQgPSAnYyc7XG5cbmNvbnN0IGJhc2V1cmxJbnZvbHZlbWVudCA9ICdodHRwczovL3VzLWNlbnRyYWwxLWludm9sdmVtZW50LWFwaS5jbG91ZGZ1bmN0aW9ucy5uZXQvY2Fwc3RvbmVBcGkvYXBwcy8nO1xuY29uc3QgcGFyYW1ldGVyTGlrZUFwcCA9ICdsaWtlcy8nO1xuY29uc3QgcGFyYW1ldGVyQ29tbUFwcCA9ICdjb21tZW50cy8nO1xuY29uc3QgcGFyYW1ldGVyUmVzZXJ2QXBwID0gJ3Jlc2VydmF0aW9ucy8nO1xuY29uc3QgcGFyYW1ldGVySURBcHAgPSAnV2JlM0l6blEyTFFvRlBIbVZyd3AvJztcblxuZXhwb3J0IHtcbiAgY2xhc3NlcywgYmFzZXVybEZpbHRlck1lYWwsIGJhc2V1cmxsb29rdXBNZWFsLCBwYXJhbWV0ZXJNZWFsSUQsIHBhcmFtZXRlck1lYWxDYXQsXG4gIHhsaW5rLCBiYXNldXJsSW52b2x2ZW1lbnQsIHBhcmFtZXRlckxpa2VBcHAsIHBhcmFtZXRlckNvbW1BcHAsIHBhcmFtZXRlclJlc2VydkFwcCxcbiAgcGFyYW1ldGVySURBcHAsXG59OyIsImltcG9ydCB7XG4gIGNyZWF0ZUFwaU1lYWxVUkwsIGNyZWF0ZUFwaUludlVSTCxcbn0gZnJvbSAnLi9jcmVhdGVVUkxBUEkuanMnO1xuaW1wb3J0IHsgY3JlYXRlSXRlbSB9IGZyb20gJy4vTGlzdEl0ZW1Nb2QuanMnO1xuaW1wb3J0IHsgaGFuZGxlUG9zdCB9IGZyb20gJy4vUG9zdEFQSS5qcyc7XG5pbXBvcnQgeyBoYW5kbGVHRVRBUEkgfSBmcm9tICcuL0dldEFQSS5qcyc7XG5pbXBvcnQge1xuICBjbGFzc2VzLCBiYXNldXJsRmlsdGVyTWVhbCwgYmFzZXVybGxvb2t1cE1lYWwsIHBhcmFtZXRlck1lYWxJRCwgcGFyYW1ldGVyTWVhbENhdCxcbiAgeGxpbmssIGJhc2V1cmxJbnZvbHZlbWVudCwgcGFyYW1ldGVyTGlrZUFwcCxcbiAgcGFyYW1ldGVySURBcHAsXG59IGZyb20gJy4vY29uc3QuanMnO1xuXG5jb25zdCBhcHBlbmRSZXNwb25zZVBhcmEgPSBhc3luYyAobm9kZSkgPT4ge1xuICBjb25zdCBzaG93UmVzcG9uc2VGb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Zvcm1GZWVkYmFjaycpO1xuICBzaG93UmVzcG9uc2VGb3JtLnRleHRDb250ZW50ID0gbm9kZTtcbn07XG5cbmNvbnN0IGxpa2VzSnNvbiA9IGFzeW5jIChpZCkgPT4gKFxuICB7XG4gICAgaXRlbV9pZDogaWQsXG4gIH1cbik7XG5cbmNvbnN0IGZpbmRMaWtlcyA9IGFzeW5jIChpZCwgaW52QXJyKSA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IGludkFyci5maWx0ZXIoKGludkFycikgPT4gaW52QXJyLml0ZW1faWQgPT09IGlkKTtcbiAgaWYgKHJlc3VsdC5sZW5ndGggPiAwKSByZXR1cm4gcmVzdWx0WzBdLmxpa2VzO1xuICByZXR1cm4gMDtcbn07XG5cbmNvbnN0IGNyZWF0ZUxpa2UgPSBhc3luYyAoZXZlbnQpID0+IHtcbiAgaWYgKGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2hlYXJ0LWxpa2UnKSkge1xuICAgIGNvbnN0IGN1cnJlbnRJRCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5pZDtcbiAgICBjb25zdCB1cmwgPSBjcmVhdGVBcGlJbnZVUkwoYmFzZXVybEludm9sdmVtZW50LCBwYXJhbWV0ZXJJREFwcCwgcGFyYW1ldGVyTGlrZUFwcCk7XG4gICAgYXdhaXQgaGFuZGxlUG9zdCh1cmwsIGF3YWl0IGxpa2VzSnNvbihjdXJyZW50SUQpKTtcbiAgICBjb25zdCBkYXRhUmVzcG9uc2VJbnYgPSBhd2FpdCBoYW5kbGVHRVRBUEkodXJsKTtcbiAgICBjb25zdCBxdHlMaWtlcyA9IGF3YWl0IGZpbmRMaWtlcyhjdXJyZW50SUQsIGRhdGFSZXNwb25zZUludik7XG4gICAgY29uc3QgbGlrZVRleHQgPSBldmVudC50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5hcHAtbGlrZS10ZXh0Jyk7XG4gICAgbGlrZVRleHQudGV4dENvbnRlbnQgPSBgJHtxdHlMaWtlc30gbGlrZSR7cXR5TGlrZXMgPiAxID8gJ3MnIDogJyd9YDtcbiAgICBjb25zdCB1c2VWU0cgPSBldmVudC50YXJnZXQucXVlcnlTZWxlY3RvcigndXNlJyk7XG4gICAgdXNlVlNHLnNldEF0dHJpYnV0ZSgnaHJlZicsICcuLi9hc3NldC9yZXNvdXJjZS9pY29ucy5zdmcjaGVhcnQtbGlrZS1yZWQnKTtcbiAgfVxufTtcblxuY29uc3QgZ2V0TWVhbHNBUElSZXNwb25zZSA9IGFzeW5jIChkYXRhKSA9PiB7XG4gIGNvbnN0IG1lYWxJRFVSTCA9IGNyZWF0ZUFwaU1lYWxVUkwoYmFzZXVybGxvb2t1cE1lYWwsIHBhcmFtZXRlck1lYWxJRCwgZGF0YS5pZE1lYWwpO1xuICBjb25zdCBkYXRhUmVzcG9uc2UgPSBhd2FpdCBoYW5kbGVHRVRBUEkobWVhbElEVVJMKTtcbiAgcmV0dXJuIGRhdGFSZXNwb25zZS5tZWFscztcbn07XG5cbmNvbnN0IGFwcGVuZEl0ZW1zID0gYXN5bmMgKGRhdGFBcnIsIGludkFycikgPT4ge1xuICBjb25zdCBhcHBDdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwLWN0bicpO1xuICBhcHBDdG4uaW5uZXJIVE1MID0gJyc7XG4gIGRhdGFBcnIuZm9yRWFjaChhc3luYyAoZGF0YSkgPT4ge1xuICAgIGNvbnN0IG1lYWxEYXRhID0gYXdhaXQgZ2V0TWVhbHNBUElSZXNwb25zZShkYXRhKTtcbiAgICBjb25zdCBtZWFsRnJhZyA9IGF3YWl0IGNyZWF0ZUl0ZW0oJ2xpJywgY2xhc3NlcywgbWVhbERhdGEsIHhsaW5rLCBhd2FpdCBmaW5kTGlrZXMobWVhbERhdGFbMF0uaWRNZWFsLCBpbnZBcnIpLCBjcmVhdGVMaWtlKTtcbiAgICBhcHBDdG4uYXBwZW5kQ2hpbGQobWVhbEZyYWcpO1xuICB9KTtcbn07XG5cbmNvbnN0IHByaW50TGlzdCA9IGFzeW5jIChldmVudCkgPT4ge1xuICBjb25zdCBtZWFsQ2F0VVJMID0gY3JlYXRlQXBpTWVhbFVSTChiYXNldXJsRmlsdGVyTWVhbCwgcGFyYW1ldGVyTWVhbENhdCwgZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnaHJlZicpKTtcbiAgY29uc3QgaW52TGlrZXNVUkwgPSBjcmVhdGVBcGlJbnZVUkwoYmFzZXVybEludm9sdmVtZW50LCBwYXJhbWV0ZXJJREFwcCwgcGFyYW1ldGVyTGlrZUFwcCk7XG4gIGNvbnN0IGRhdGFSZXNwb25zZU1lYWwgPSBhd2FpdCBoYW5kbGVHRVRBUEkobWVhbENhdFVSTCk7XG4gIGNvbnN0IGRhdGFSZXNwb25zZUludiA9IGF3YWl0IGhhbmRsZUdFVEFQSShpbnZMaWtlc1VSTCk7XG4gIGlmIChkYXRhUmVzcG9uc2VNZWFsIGluc3RhbmNlb2YgRXJyb3IgfHwgZGF0YVJlc3BvbnNlSW52IGluc3RhbmNlb2YgRXJyb3IpIGFwcGVuZFJlc3BvbnNlUGFyYSgnVW5hYmxlIHRvIEZldGNoIERhdGEnKTtcbiAgZWxzZSBhd2FpdCBhcHBlbmRJdGVtcyhkYXRhUmVzcG9uc2VNZWFsLm1lYWxzLCBkYXRhUmVzcG9uc2VJbnYpO1xufTtcblxuZXhwb3J0IHtcbiAgcHJpbnRMaXN0LCBiYXNldXJsRmlsdGVyTWVhbCxcbn07IiwiLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gZm9yIFBPU1RpbmcgZGF0YSBhcyBKU09OIHdpdGggZmV0Y2guXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSBVUkwgdG8gUE9TVCBkYXRhIHRvXG4gKiBAcGFyYW0ge0Zvcm1EYXRhfSBmb3JtRGF0YSAtIGBGb3JtRGF0YWAgaW5zdGFuY2VcbiAqIEBwYXJhbSB7SlNPTn0ganNvbkZvcm1hdCAtIGpzb24gb2JqZWN0IHRvIGJlIHBhc3NlZCBhcyBib2R5IG9mIGZldGNoIGFwaS5cbiAqIEByZXR1cm4ge09iamVjdH0gLSBSZXNwb25zZSBib2R5IGZyb20gVVJMIHRoYXQgd2FzIFBPU1RlZCB0b1xuICovXG5jb25zdCBwb3N0RGF0YUFzSnNvbiA9IGFzeW5jICh7IHVybCwgZm9ybURhdGEgPSBmYWxzZSwganNvbkZvcm1hdCA9IGZhbHNlIH0pID0+IHtcbiAgbGV0IGpzb25EYXRhO1xuICBpZiAoZm9ybURhdGEpIHtcbiAgICBqc29uRGF0YSA9IE9iamVjdC5mcm9tRW50cmllcyhmb3JtRGF0YS5lbnRyaWVzKCkpO1xuICB9IGVsc2UgaWYgKGpzb25Gb3JtYXQpIGpzb25EYXRhID0ganNvbkZvcm1hdDtcbiAgY29uc3QgSnNvblN0cmluZyA9IEpTT04uc3RyaW5naWZ5KGpzb25EYXRhKTtcbiAgY29uc3QgZmV0Y2hPcHRpb25zID0ge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgfSxcbiAgICBib2R5OiBKc29uU3RyaW5nLFxuICB9O1xuXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCBmZXRjaE9wdGlvbnMpO1xuICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbn07XG5cbi8qKlxuICogRXZlbnQgaGFuZGxlciBmb3IgYSBmb3JtIHN1Ym1pdCBldmVudC5cbiAqIEBwYXJhbSB7U3VibWl0RXZlbnR9IGV2ZW50XG4gKi9cbmNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSBhc3luYyAoZXZlbnQsIHVybCkgPT4ge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICBjb25zdCBzY29yZUZvcm0gPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuICB0cnkge1xuICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKHNjb3JlRm9ybSk7XG4gICAgc2NvcmVGb3JtLnJlc2V0KCk7XG4gICAgY29uc3QgcmVzcG9uc2VEYXRhID0gYXdhaXQgcG9zdERhdGFBc0pzb24oeyB1cmwsIGZvcm1EYXRhIH0pO1xuICAgIHJldHVybiByZXNwb25zZURhdGE7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGVycm9yO1xuICB9XG59O1xuXG4vKipcbiAqIEV2ZW50IGhhbmRsZXIgZm9yIGEgZm9ybSBzdWJtaXQgZXZlbnQuXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge0pTT059IGpzb25cbiAqL1xuY29uc3QgaGFuZGxlUG9zdCA9IGFzeW5jICh1cmwsIGpzb24pID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZURhdGEgPSBhd2FpdCBwb3N0RGF0YUFzSnNvbih7IHVybCwgZm9ybURhdGE6IGZhbHNlLCBqc29uRm9ybWF0OiBqc29uIH0pO1xuICAgIHJldHVybiByZXNwb25zZURhdGE7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGVycm9yO1xuICB9XG59O1xuXG5leHBvcnQge1xuICBoYW5kbGVGb3JtU3VibWl0LCBwb3N0RGF0YUFzSnNvbiwgaGFuZGxlUG9zdCxcbn07IiwiaW1wb3J0IHtcbiAgY3JlYXRlRWxlbWVudERlZmF1bHQsIGNyZWF0ZUltZywgY3JlYXRlQnV0dG9uLCBjcmVhdGVOUyxcbn0gZnJvbSAnLi9jcmVhdGVFbGVtZW50TW9kLmpzJztcblxuY29uc3QgY3JlYXRlSXRlbSA9IGFzeW5jIChlbGVtLCBjbGFzc2VzLCBtZWFsQXBpLCB4bGluaywgbGlrZUFwaSwgY2IpID0+IHtcbiAgY29uc3QgZG9jRnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgZG9jRnJhZy5hcHBlbmRDaGlsZChjcmVhdGVJbWcoY2xhc3Nlc1sxXSwgbWVhbEFwaVswXS5zdHJNZWFsLCBtZWFsQXBpWzBdLnN0ck1lYWxUaHVtYikpO1xuICBjb25zdCBlbGVtSGVhZGVyID0gY3JlYXRlRWxlbWVudERlZmF1bHQoJ2RpdicsIGNsYXNzZXNbMl0pO1xuICBjb25zdCB0aXRsZUltZyA9IGNyZWF0ZUVsZW1lbnREZWZhdWx0KCdwJywgY2xhc3Nlc1szXSwgbWVhbEFwaVswXS5zdHJNZWFsKTtcbiAgZWxlbUhlYWRlci5hcHBlbmRDaGlsZCh0aXRsZUltZyk7XG4gIGNvbnN0IGVsZW1MaWtlcyA9IGNyZWF0ZUVsZW1lbnREZWZhdWx0KCdkaXYnLCBjbGFzc2VzWzRdKTtcbiAgY29uc3QgZWxlbUxpa2VzU1ZHID0gY3JlYXRlTlMoeGxpbmspO1xuICBlbGVtTGlrZXMuYXBwZW5kQ2hpbGQoZWxlbUxpa2VzU1ZHKTtcbiAgY29uc3QgZWxlbUxpa2VzUCA9IGNyZWF0ZUVsZW1lbnREZWZhdWx0KCdwJywgY2xhc3Nlc1s1XSwgYCR7bGlrZUFwaX0gbGlrZSR7bGlrZUFwaSA+IDEgPyAncycgOiAnJ31gKTtcbiAgZWxlbUxpa2VzLmFwcGVuZENoaWxkKGVsZW1MaWtlc1ApO1xuICBlbGVtSGVhZGVyLmFwcGVuZENoaWxkKGVsZW1MaWtlcyk7XG4gIGRvY0ZyYWcuYXBwZW5kQ2hpbGQoZWxlbUhlYWRlcik7XG4gIGNvbnN0IGJ0bkRpdiA9IGNyZWF0ZUVsZW1lbnREZWZhdWx0KCdkaXYnLCBjbGFzc2VzWzZdKTtcbiAgYnRuRGl2LmFwcGVuZENoaWxkKGNyZWF0ZUJ1dHRvbignYnV0dG9uJywgY2xhc3Nlc1s3XSwgJ0dvIHRvIENvbW1lbnRzJywgJ0NvbW1lbnRzJykpO1xuICBidG5EaXYuYXBwZW5kQ2hpbGQoY3JlYXRlQnV0dG9uKCdidXR0b24nLCBjbGFzc2VzWzddLCAnR28gdG8gUmVzZXJ2YXRpb25zJywgJ1Jlc2VydmF0aW9ucycpKTtcbiAgZG9jRnJhZy5hcHBlbmRDaGlsZChidG5EaXYpO1xuICBjb25zdCBpdGVtRWxlbSA9IGNyZWF0ZUVsZW1lbnREZWZhdWx0KGVsZW0sIGNsYXNzZXNbMF0sIGZhbHNlLCBkb2NGcmFnKTtcbiAgaXRlbUVsZW0uc2V0QXR0cmlidXRlKCdkYXRhLWlkJywgbWVhbEFwaVswXS5pZE1lYWwpO1xuICBpdGVtRWxlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNiKTtcbiAgcmV0dXJuIGl0ZW1FbGVtO1xufTtcblxuZXhwb3J0IHtcbiAgY3JlYXRlRWxlbWVudERlZmF1bHQsIGNyZWF0ZUl0ZW0sXG59OyIsImltcG9ydCAnLi9zdHlsZS5jc3MnO1xuaW1wb3J0ICcuL2Fzc2V0L3Jlc291cmNlL2ljb25zLnN2Zyc7XG5pbXBvcnQge1xuICBwcmludExpc3QsXG59IGZyb20gJy4vbW9kdWxlcy91dGlscy5qcyc7XG5cbmNvbnN0IG5hdkl0ZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubmF2LWl0ZW1zIGEnKTtcblxuLy8gU2VsZWN0IHNlY3Rpb24gdG8gc2hvd1xubmF2SXRlbS5mb3JFYWNoKChsaW5rKSA9PiB7XG4gIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBsaW5rLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgIHByaW50TGlzdChlKTtcbiAgfSk7XG59KTsiXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJjcmVhdGVBcGlNZWFsVVJMIiwiYmFzZXVybCIsInF1ZXJ5S2V5IiwicXVlcnlWYWx1ZSIsImNyZWF0ZUFwaUludlVSTCIsImVuZHBvaW50IiwiYWRkQ2xhc3MiLCJlbGVtIiwiY2xhc3NlcyIsImNsYXNzTGlzdCIsImFkZCIsImNyZWF0ZUVsZW1lbnREZWZhdWx0IiwidGV4dENvbnRlbnQiLCJpbm5lckNoaWxkIiwiY3JlYXRlQnV0dG9uIiwiZnVuYyIsImFyaWFMYWJlbCIsImhyZWYiLCJidXR0b24iLCJ0eXBlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImxvY2F0aW9uIiwicmVkaXJlY3RXaW5kb3ciLCJoYW5kbGVHRVRBUEkiLCJhc3luYyIsInVybCIsIlVSTCIsInJlc3BvbnNlIiwiZmV0Y2giLCJvayIsImVycm9yTWVzc2FnZSIsInRleHQiLCJqc29uIiwiZmV0Y2hEYXRhSlNPTiIsImVycm9yIiwiYmFzZXVybEludm9sdmVtZW50IiwicGFyYW1ldGVyTGlrZUFwcCIsInBhcmFtZXRlcklEQXBwIiwiZmluZExpa2VzIiwiaW52QXJyIiwiZmlsdGVyIiwiaXRlbV9pZCIsImxpa2VzIiwiY3JlYXRlTGlrZSIsImV2ZW50IiwiY29udGFpbnMiLCJjdXJyZW50SUQiLCJjdXJyZW50VGFyZ2V0IiwiZGF0YXNldCIsImZvcm1EYXRhIiwianNvbkZvcm1hdCIsImpzb25EYXRhIiwiT2JqZWN0IiwiZnJvbUVudHJpZXMiLCJlbnRyaWVzIiwiZmV0Y2hPcHRpb25zIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJwb3N0RGF0YUFzSnNvbiIsImhhbmRsZVBvc3QiLCJsaWtlc0pzb24iLCJkYXRhUmVzcG9uc2VJbnYiLCJxdHlMaWtlcyIsImFwcGVuZEl0ZW1zIiwiZGF0YUFyciIsImFwcEN0biIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJIVE1MIiwiZm9yRWFjaCIsIm1lYWxEYXRhIiwibWVhbElEVVJMIiwiaWRNZWFsIiwibWVhbHMiLCJnZXRNZWFsc0FQSVJlc3BvbnNlIiwibWVhbEZyYWciLCJtZWFsQXBpIiwieGxpbmsiLCJsaWtlQXBpIiwiY2IiLCJkb2NGcmFnIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIm5hbWUiLCJpbWdFbGVtIiwiY3JlYXRlSW1nIiwic3RyTWVhbCIsInN0ck1lYWxUaHVtYiIsImVsZW1IZWFkZXIiLCJ0aXRsZUltZyIsImVsZW1MaWtlcyIsImVsZW1MaWtlc1NWRyIsInNwbGl0IiwidXNlIiwiY3JlYXRlRWxlbWVudE5TIiwic3ZnIiwiY3JlYXRlTlMiLCJlbGVtTGlrZXNQIiwiYnRuRGl2IiwiaXRlbUVsZW0iLCJjcmVhdGVJdGVtIiwicXVlcnlTZWxlY3RvckFsbCIsImxpbmsiLCJwcmV2ZW50RGVmYXVsdCIsIm1lYWxDYXRVUkwiLCJnZXRBdHRyaWJ1dGUiLCJpbnZMaWtlc1VSTCIsImRhdGFSZXNwb25zZU1lYWwiLCJub2RlIiwiYXBwZW5kUmVzcG9uc2VQYXJhIiwicHJpbnRMaXN0Il0sInNvdXJjZVJvb3QiOiIifQ==